---
// components
import Layout from '@layouts/Layout.astro'
import IndexIntroTitle from '@components/texts/IndexIntroTitle'
// assets
import IntroVideo from '@assets/videos/intro.mp4'
---

<Layout>
	<section class="intro">
		<div class="intro-title h2">
			<IndexIntroTitle
				text='Explore more possibilities<br>of Web Design .'
			/>
		</div>
		<div class="intro-bg absolute-center" style="--scale-ratio: 1;">
			<video src={IntroVideo} class="intro-video" />
		</div>
		<div class="intro-info">

		</div>
	</section>
</Layout>

<style lang="scss">
	.intro {
		@apply relative w-screen h-screen max-h-[67.5rem] overflow-hidden;

		&-title {
			@apply absolute z-10 top-[40%] left-1/2 -translate-x-1/2 -translate-y-1/2 w-[90%] max-w-3xl text-center text-white font-thin opacity-[calc(1-var(--title-fadeout-progress))] blur-[calc(var(--title-fadeout-progress)*3rem)];
		}

		&-bg {
			--before-gradient: radial-gradient(50rem circle at var(--mouse-x, 50%) var(--mouse-y, 50%), transparent, rgba(34, 31, 31, 0.5) 70%);

			@apply -z-10 w-[calc(var(--scale-ratio)*100%)] h-[calc(var(--scale-ratio)*100%)];
			// before:absolute before:z-[1] before:top-0 before:left-0 before:block before:w-full before:h-full before:bg-[image:var(--before-gradient)];
		}

		&-video {
			@apply w-full h-full object-cover object-center;
		}
	}
</style>

<style is:global lang="scss">
	.intro-title {
		&.is-show {
			.char {
				transform: translate3d(0, 0, 0);
			}
		}

		.char {
			transform: translate3d(0, 100%, 0);
		}
	}
</style>

<script>
	import { gsap } from 'gsap';
	import { ScrollTrigger } from 'gsap/all'
	// store
	import { isHeaderScrolled } from '@store/globalStore'
	import { isIntroTitleShow } from '@store/indexStore';

	gsap.registerPlugin(ScrollTrigger)

	// intro 特效
	const useIntroEffect = () => {
		const intro = document.querySelector('section.intro')
		if (!intro) return;

		const introTitle: HTMLElement = intro.querySelector('.intro-title')
		const introBg: HTMLElement = intro.querySelector('.intro-bg')
		const introVideo: HTMLVideoElement = intro.querySelector('.intro-video')

		const titleFadeOutPoint:number = 0.05
		const videoPlayPoint:number = 0.1
		const scaleStartPoint:number = 0.5
		const headerScrolledPoint: number = 0.7

		const introTitleHandler = (progress: number) => {
			if (progress > titleFadeOutPoint) {
				if (isIntroTitleShow.get()) isIntroTitleShow.set(false)
			}
			else {
				if (!isIntroTitleShow.get()) isIntroTitleShow.set(true)
			}
		}

		const headerHandler = (progress: number) => {
			if (progress > headerScrolledPoint) {
				if (!isHeaderScrolled.get()) isHeaderScrolled.set(true)
			}
			else {
				if (isHeaderScrolled.get()) isHeaderScrolled.set(false)
			}
		}

		gsap.timeline({
			scrollTrigger: {
				trigger: intro,
				start: 'top top',
				end: '+=100%',
				pin: true,
				// markers: true,
				onUpdate: (e) => {
					if (!introVideo || isNaN(introVideo.duration)) return;
					const { progress } = e
					const { duration } = introVideo
					introTitleHandler(progress)
					headerHandler(progress)
					const currentTime = ((1 - videoPlayPoint) * progress - videoPlayPoint) * duration
					introVideo.currentTime = currentTime
					const scaleRatio = 1 + Math.max(progress - scaleStartPoint, 0) * 4.4
					introBg.style.setProperty('--scale-ratio', `${scaleRatio}`)
					// const titleProgress = Math.max(Math.min((progress - titleFadeOutPoint) / (videoPlayPoint - titleFadeOutPoint), 1), 0)
					// introTitle.style.setProperty('--title-fadeout-progress', `${titleProgress}`)
					// console.log('%cindex.astro line:67 titleProgress', 'color: #007acc;', titleProgress);
				}
			}
		})

		isIntroTitleShow.listen(val => {
			if (val) {
				introTitle.classList.add('is-show')
			}
			else {
				introTitle.classList.remove('is-show')
			}
		})
	}

	// DOMContentLoaded
	document.addEventListener('DOMContentLoaded', () => {
		useIntroEffect()
	})
</script>